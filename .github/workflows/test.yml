name: Tests

on:
  pull_request:
  push:
    branches: [master, main]
    tags: ["**"]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  # Most of the "main", "auth" and "helm" jobs are the same and only differ
  # in small things. Unfortunately there is no easy way to share steps between
  # jobs or have "template" jobs, so we use `if` conditions on steps
  tests:
    runs-on: ubuntu-20.04
    strategy:
      # keep running so we can see if tests with other k3s/k8s/helm versions pass
      fail-fast: false
      matrix:
        include:
            # This version of k3s uses kubernetes v1.18
            - k3s-version: v1.18.10+k3s2
              helm_version: v3.4.1
              test: main
            - k3s-version: v1.18.10+k3s2
              helm_version: v3.4.1
              test: auth
            - k3s-version: v1.18.10+k3s2
              helm_version: v3.4.1
              test: helm
    steps:
      - uses: actions/checkout@v2
        with:
          # chartpress requires the full history
          fetch-depth: 0
      - uses: jupyterhub/action-k3s-helm@v0.2.2
        with:
          k3s-version: ${{ matrix.k3s-version }}
          helm-version: ${{ matrix.helm-version }}
          metrics-enabled: false
          traefik-enabled: false
          docker-enabled: true
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Display kubernetes related details
        run: |
            echo "kubeconfig: $KUBECONFIG"
            echo
            echo "List of running pods:"
            kubectl get pods --all-namespaces
            echo
            echo "List of cluster nodes:"
            kubectl get nodes
            echo
            echo "Helm list output:"
            helm list
      - name: Setup helm chart repositories
        run: |
            helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
            helm repo update
      - name: Setup OS level dependencies
        run: |
            sudo apt-get update
            sudo apt-get install --yes \
              build-essential \
              curl \
              libcurl4-openssl-dev \
              libssl-dev
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14'
      - name: Run webpack to build static assets
        run: |
            npm install
            npm run webpack
      - name: Setup Python package dependencies
        run: |
            # Install development requirements, package requirements, and frozen image
            # requirements, with an increasing priority.
            pip install -r dev-requirements.txt
            pip install .
            pip install -r helm-chart/images/binderhub/requirements.txt
      - name: Install JupyterHub chart for main tests
        if: matrix.test == 'main'
        run: ./testing/local-binder-k8s-hub/install-jupyterhub-chart
      - name: Install JupyterHub chart for auth tests
        if: matrix.test == 'auth'
        run: ./testing/local-binder-k8s-hub/install-jupyterhub-chart --auth
      - name: Use chartpress to create the helm chart
        if: matrix.test == 'helm'
        run: |
            # Use chartpress to create the helm chart and build its images
            helm dependency update ./helm-chart/binderhub
            (cd helm-chart && chartpress)
            git --no-pager diff
      - name: Validate the chart against the k8s API
        if: matrix.test == 'helm'
        run: |
            helm template --validate binderhub-test helm-chart/binderhub \
                --values testing/k8s-binder-k8s-hub/binderhub-chart-config.yaml \
                --set config.BinderHub.hub_url=http://localhost:30902 \
                --set config.BinderHub.access_token=$GITHUB_ACCESS_TOKEN
      - name: Install the chart
        if: matrix.test == 'helm'
        run: |
          helm upgrade --install binderhub-test helm-chart/binderhub \
              --values testing/k8s-binder-k8s-hub/binderhub-chart-config.yaml \
              --set config.BinderHub.hub_url=http://localhost:30902 \
              --set config.BinderHub.hub_url_local=http://proxy-public \
              --set config.BinderHub.access_token=$GITHUB_ACCESS_TOKEN
      - name: Wait for JupyterHub to be ready
        timeout-minutes: 10
        run: |
            # Wait for JupyterHub to be ready
            set -e
            . ci/common
            await_jupyterhub
            # Next few commands are here for sanity checking/debugging of CI
            # related issues
            echo "Proxy service details"
            kubectl get svc proxy-public -o json
            echo
            echo "kubectl describe svc proxy-public"
            kubectl describe svc proxy-public
            echo
            echo "kubectl get svc"
            kubectl get svc
            echo
            echo "curl http://localhost:30902/hub/api/" should print the JupyterHub version
            curl http://localhost:30902/hub/api/
      - name: Wait for BinderHub to be ready
        if: matrix.test == 'helm'
        timeout-minutes: 10
        run: |
            # Wait for BinderHub to be ready
            set -e
            . ci/common
            await_binderhub
            echo "curl http://localhost:30901/health" to check BinderHub\'s health
            curl http://localhost:30901/health
            echo
      - name: Run main tests
        if: matrix.test == 'main'
        # running the "main" tests means "all tests that aren't auth"
        run: pytest -m "not auth" -v --maxfail=2 --cov binderhub --durations=10 --color=yes
      - name: Run auth tests
        if: matrix.test == 'auth'
        # running the "auth" tests means "all tests that are marked as auth"
        run: pytest -m "auth" -v --maxfail=2 --cov binderhub --durations=10 --color=yes
      - name: Run helm tests
        if: matrix.test == 'helm'
        run: |
            export BINDER_URL=http://localhost:30901
            pytest -m "remote" -v --maxfail=2 --cov binderhub --durations=10 --color=yes
      - name: Kubernetes namespace report
        if: ${{ always() }}
        run: |
          # Display debugging information and always provide the logs from
          # certain important k8s deployments.
          . ci/common
          full_namespace_report deploy/binder deploy/hub deploy/proxy
      - name: Upload coverage stats
        uses: codecov/codecov-action@v1
        if: ${{ always() }}
